// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/proto/consensus.proto

package consensus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsensusServiceClient is the client API for ConsensusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusServiceClient interface {
	// 提议新区块
	ProposeBlock(ctx context.Context, in *ProposeBlockRequest, opts ...grpc.CallOption) (*ProposeBlockResponse, error)
	// 获取共识状态
	GetConsensusStatus(ctx context.Context, in *GetConsensusStatusRequest, opts ...grpc.CallOption) (*GetConsensusStatusResponse, error)
	// 节点注册
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	// 同步区块
	SyncBlocks(ctx context.Context, in *SyncBlocksRequest, opts ...grpc.CallOption) (ConsensusService_SyncBlocksClient, error)
}

type consensusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusServiceClient(cc grpc.ClientConnInterface) ConsensusServiceClient {
	return &consensusServiceClient{cc}
}

func (c *consensusServiceClient) ProposeBlock(ctx context.Context, in *ProposeBlockRequest, opts ...grpc.CallOption) (*ProposeBlockResponse, error) {
	out := new(ProposeBlockResponse)
	err := c.cc.Invoke(ctx, "/consensus.ConsensusService/ProposeBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) GetConsensusStatus(ctx context.Context, in *GetConsensusStatusRequest, opts ...grpc.CallOption) (*GetConsensusStatusResponse, error) {
	out := new(GetConsensusStatusResponse)
	err := c.cc.Invoke(ctx, "/consensus.ConsensusService/GetConsensusStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, "/consensus.ConsensusService/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) SyncBlocks(ctx context.Context, in *SyncBlocksRequest, opts ...grpc.CallOption) (ConsensusService_SyncBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConsensusService_ServiceDesc.Streams[0], "/consensus.ConsensusService/SyncBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &consensusServiceSyncBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConsensusService_SyncBlocksClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type consensusServiceSyncBlocksClient struct {
	grpc.ClientStream
}

func (x *consensusServiceSyncBlocksClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsensusServiceServer is the server API for ConsensusService service.
// All implementations must embed UnimplementedConsensusServiceServer
// for forward compatibility
type ConsensusServiceServer interface {
	// 提议新区块
	ProposeBlock(context.Context, *ProposeBlockRequest) (*ProposeBlockResponse, error)
	// 获取共识状态
	GetConsensusStatus(context.Context, *GetConsensusStatusRequest) (*GetConsensusStatusResponse, error)
	// 节点注册
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	// 同步区块
	SyncBlocks(*SyncBlocksRequest, ConsensusService_SyncBlocksServer) error
	mustEmbedUnimplementedConsensusServiceServer()
}

// UnimplementedConsensusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsensusServiceServer struct {
}

func (UnimplementedConsensusServiceServer) ProposeBlock(context.Context, *ProposeBlockRequest) (*ProposeBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeBlock not implemented")
}
func (UnimplementedConsensusServiceServer) GetConsensusStatus(context.Context, *GetConsensusStatusRequest) (*GetConsensusStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsensusStatus not implemented")
}
func (UnimplementedConsensusServiceServer) RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedConsensusServiceServer) SyncBlocks(*SyncBlocksRequest, ConsensusService_SyncBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncBlocks not implemented")
}
func (UnimplementedConsensusServiceServer) mustEmbedUnimplementedConsensusServiceServer() {}

// UnsafeConsensusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusServiceServer will
// result in compilation errors.
type UnsafeConsensusServiceServer interface {
	mustEmbedUnimplementedConsensusServiceServer()
}

func RegisterConsensusServiceServer(s grpc.ServiceRegistrar, srv ConsensusServiceServer) {
	s.RegisterService(&ConsensusService_ServiceDesc, srv)
}

func _ConsensusService_ProposeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ProposeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consensus.ConsensusService/ProposeBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ProposeBlock(ctx, req.(*ProposeBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_GetConsensusStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsensusStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).GetConsensusStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consensus.ConsensusService/GetConsensusStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).GetConsensusStatus(ctx, req.(*GetConsensusStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consensus.ConsensusService/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_SyncBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsensusServiceServer).SyncBlocks(m, &consensusServiceSyncBlocksServer{stream})
}

type ConsensusService_SyncBlocksServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type consensusServiceSyncBlocksServer struct {
	grpc.ServerStream
}

func (x *consensusServiceSyncBlocksServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

// ConsensusService_ServiceDesc is the grpc.ServiceDesc for ConsensusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsensusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consensus.ConsensusService",
	HandlerType: (*ConsensusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeBlock",
			Handler:    _ConsensusService_ProposeBlock_Handler,
		},
		{
			MethodName: "GetConsensusStatus",
			Handler:    _ConsensusService_GetConsensusStatus_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _ConsensusService_RegisterNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncBlocks",
			Handler:       _ConsensusService_SyncBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/consensus.proto",
}
